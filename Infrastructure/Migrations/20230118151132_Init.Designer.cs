// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230118151132_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Dushanbe",
                            Email = "ardasher@icloud.com",
                            FirstName = "Ardasher",
                            LastName = "Sattori",
                            Phone = "881933339"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Asht",
                            Email = "abdullah@gmail.com",
                            FirstName = "Abdullah",
                            LastName = "Sheralizoda",
                            Phone = "000000000"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Kulob",
                            Email = "anushervon@gmail.com",
                            FirstName = "Anushervon",
                            LastName = "Bekov",
                            Phone = "000000000"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Dushanbe",
                            Email = "sherzod@gmail.com",
                            FirstName = "Sherzod",
                            LastName = "Ishankulov",
                            Phone = "000000000"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("OrderFulfilled")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("OrderPlaced")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = 1,
                            OrderFulfilled = new DateTime(2023, 1, 18, 15, 11, 32, 388, DateTimeKind.Utc).AddTicks(2578),
                            OrderPlaced = new DateTime(2023, 1, 18, 15, 11, 32, 388, DateTimeKind.Utc).AddTicks(2576)
                        },
                        new
                        {
                            Id = 2,
                            CustomerId = 2,
                            OrderFulfilled = new DateTime(2023, 1, 18, 15, 11, 32, 388, DateTimeKind.Utc).AddTicks(2583),
                            OrderPlaced = new DateTime(2023, 1, 18, 15, 11, 32, 388, DateTimeKind.Utc).AddTicks(2583)
                        },
                        new
                        {
                            Id = 3,
                            CustomerId = 3,
                            OrderFulfilled = new DateTime(2023, 1, 18, 15, 11, 32, 388, DateTimeKind.Utc).AddTicks(2584),
                            OrderPlaced = new DateTime(2023, 1, 18, 15, 11, 32, 388, DateTimeKind.Utc).AddTicks(2584)
                        },
                        new
                        {
                            Id = 4,
                            CustomerId = 4,
                            OrderFulfilled = new DateTime(2023, 1, 18, 15, 11, 32, 388, DateTimeKind.Utc).AddTicks(2585),
                            OrderPlaced = new DateTime(2023, 1, 18, 15, 11, 32, 388, DateTimeKind.Utc).AddTicks(2585)
                        });
                });

            modelBuilder.Entity("Domain.Entities.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OrderId = 1,
                            ProductId = 1,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 2,
                            OrderId = 2,
                            ProductId = 2,
                            Quantity = 2
                        },
                        new
                        {
                            Id = 3,
                            OrderId = 3,
                            ProductId = 3,
                            Quantity = 3
                        },
                        new
                        {
                            Id = 4,
                            OrderId = 4,
                            ProductId = 4,
                            Quantity = 4
                        });
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Lexus",
                            Price = 10000m
                        },
                        new
                        {
                            Id = 2,
                            Name = "Mercedes",
                            Price = 20000m
                        },
                        new
                        {
                            Id = 3,
                            Name = "Audi",
                            Price = 30000m
                        },
                        new
                        {
                            Id = 4,
                            Name = "Bmw",
                            Price = 40000m
                        });
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.HasOne("Domain.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Domain.Entities.OrderDetail", b =>
                {
                    b.HasOne("Domain.Entities.Order", "Order")
                        .WithOne("OrderDetail")
                        .HasForeignKey("Domain.Entities.OrderDetail", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Entities.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderDetail")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.Navigation("OrderDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
